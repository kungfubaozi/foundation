syntax = "proto3";

package fs.base.authenticate;

import "zskparker.com/foundation/base/pb/base.proto";

service Authenticate {

    rpc New (NewRequest) returns (NewResponse);

    rpc Check (CheckRequest) returns (CheckResponse);

    rpc OfflineUser (OfflineUserRequest) returns (fs.base.Response);

    rpc Get (GetRequest) returns (GetResponse);

    rpc ReplaceAuth (ReplaceAuthRequest) returns (fs.base.Response);

}

message GetRequest {
    string userId = 1;
    string clientId = 2;
    string relation = 3;
}

message GetResponse {
    fs.base.State state = 1;
    Authorize auth = 2;
}

message ReplaceAuthRequest {
    Authorize auth = 1;
}

message RouteRequest {
    fs.base.Meta meta = 1;
    string refreshToken = 2;
}

//跳转不用返回refreshToken
message RouteResponse {
    fs.base.State state = 1;
    string accessToken = 2;
    string session = 3;
}

message OfflineUserRequest {
    string userId = 1;
}

message CheckRequest {
    fs.base.Metadata metadata = 1;
    int64 maxOnlineCount = 2;
    bool allowOtherProjectUserToLogin = 3;
}

message CheckResponse {
    fs.base.State state = 1;
    string userId = 2;
    string projectId = 3;
    string clientId = 4;
    string relation = 5;
    int64 level = 6;
}

message NewResponse {
    fs.base.State state = 1;
    string refreshToken = 2;
    string accessToken = 3;
    string session = 4;
}

message NewRequest {
    int64 maxOnlineCount = 1;
    Authorize authorize = 2;
}

message Authorize {
    string userId = 1;
    int64 timestamp = 2;
    string projectId = 3;
    string clientId = 4;
    string device = 5;
    int64 platform = 6;
    string userAgent = 7;
    string ip = 8;
    string accessTokenUUID = 9;
    string refreshTokenUUID = 10;
    string relation = 11;
    int64 level = 12;
    string loginMode = 13;
}