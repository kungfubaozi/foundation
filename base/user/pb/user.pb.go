// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base/user/pb/user.proto

package fs_base_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pb "zskparker.com/foundation/base/pb"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// http
type UpdateRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Meta                 *pb.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c941ea4089a6591e, []int{0}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateRequest) GetMeta() *pb.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type GetRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c941ea4089a6591e, []int{1}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetResponse struct {
	State                *pb.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	UserId               string    `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Level                int64     `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Phone                string    `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Enterprise           string    `protobuf:"bytes,5,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
	Email                string    `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c941ea4089a6591e, []int{2}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetState() *pb.State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *GetResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GetResponse) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetResponse) GetEnterprise() string {
	if m != nil {
		return m.Enterprise
	}
	return ""
}

func (m *GetResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AddRequest struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Enterprise           string   `protobuf:"bytes,2,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
	Level                int64    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Phone                string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	FromProjectId        string   `protobuf:"bytes,6,opt,name=fromProjectId,proto3" json:"fromProjectId,omitempty"`
	FromAppId            string   `protobuf:"bytes,7,opt,name=fromAppId,proto3" json:"fromAppId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c941ea4089a6591e, []int{3}
}

func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRequest.Unmarshal(m, b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return xxx_messageInfo_AddRequest.Size(m)
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddRequest) GetEnterprise() string {
	if m != nil {
		return m.Enterprise
	}
	return ""
}

func (m *AddRequest) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AddRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AddRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AddRequest) GetFromProjectId() string {
	if m != nil {
		return m.FromProjectId
	}
	return ""
}

func (m *AddRequest) GetFromAppId() string {
	if m != nil {
		return m.FromAppId
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "fs.base.user.UpdateRequest")
	proto.RegisterType((*GetRequest)(nil), "fs.base.user.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "fs.base.user.GetResponse")
	proto.RegisterType((*AddRequest)(nil), "fs.base.user.AddRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*pb.Response, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	UpdatePhone(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdateEnterprise(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdatePassword(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdateEmail(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePhone(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/UpdatePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateEnterprise(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/UpdateEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePassword(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateEmail(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.user.User/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Add(context.Context, *AddRequest) (*pb.Response, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	UpdatePhone(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdateEnterprise(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdatePassword(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdateEmail(context.Context, *UpdateRequest) (*pb.Response, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/UpdatePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePhone(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/UpdateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateEnterprise(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePassword(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.user.User/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateEmail(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.base.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _User_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _User_Get_Handler,
		},
		{
			MethodName: "UpdatePhone",
			Handler:    _User_UpdatePhone_Handler,
		},
		{
			MethodName: "UpdateEnterprise",
			Handler:    _User_UpdateEnterprise_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _User_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _User_UpdateEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/user/pb/user.proto",
}

func init() { proto.RegisterFile("base/user/pb/user.proto", fileDescriptor_c941ea4089a6591e) }

var fileDescriptor_c941ea4089a6591e = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0x26, 0xf3, 0xa7, 0x5b, 0xe3, 0x2c, 0xda, 0x88, 0xb6, 0x51, 0x64, 0x0c, 0x73, 0x18, 0x10,
	0x12, 0x88, 0x37, 0x41, 0x70, 0x84, 0x65, 0x9d, 0x83, 0xb0, 0x44, 0xf6, 0x01, 0x3a, 0xdb, 0x35,
	0x38, 0x6e, 0x92, 0x6e, 0xbb, 0x3b, 0x2b, 0xf8, 0x4e, 0xbe, 0x8a, 0x0f, 0xe4, 0x49, 0xba, 0x3b,
	0x7f, 0xb3, 0xcc, 0xc1, 0x39, 0x35, 0xf5, 0x55, 0x7d, 0x5f, 0x7d, 0x95, 0xaa, 0xc0, 0xf3, 0x9c,
	0x69, 0x4c, 0x6a, 0x8d, 0x2a, 0x91, 0xb9, 0x7b, 0x63, 0xa9, 0x84, 0x11, 0xe4, 0xd1, 0x4e, 0xc7,
	0x36, 0x17, 0x5b, 0x2c, 0x7c, 0xfb, 0x4b, 0xdf, 0x4a, 0xa6, 0x6e, 0x51, 0xc5, 0x37, 0xa2, 0x4c,
	0x76, 0xa2, 0xae, 0x38, 0x33, 0x7b, 0x51, 0x25, 0x8e, 0x2f, 0x73, 0xf7, 0x7a, 0x6a, 0xf4, 0x19,
	0x16, 0xd7, 0x92, 0x33, 0x83, 0x19, 0xfe, 0xa8, 0x51, 0x1b, 0xf2, 0x14, 0xa6, 0x77, 0xac, 0xa8,
	0x91, 0x06, 0xcb, 0x60, 0x7d, 0x96, 0xf9, 0x80, 0xbc, 0x81, 0x49, 0x89, 0x86, 0xd1, 0xd1, 0x32,
	0x58, 0xcf, 0xd3, 0x45, 0xdc, 0x36, 0xfc, 0x82, 0x86, 0x65, 0x2e, 0x15, 0xad, 0x00, 0x2e, 0xd1,
	0xb4, 0x32, 0xcf, 0x60, 0x66, 0xcd, 0x6c, 0x79, 0xa3, 0xd3, 0x44, 0xd1, 0xef, 0x00, 0xe6, 0xae,
	0x4c, 0x4b, 0x51, 0x69, 0x24, 0x2b, 0x98, 0x6a, 0xc3, 0x8c, 0x6f, 0x37, 0x4f, 0xcf, 0x3b, 0xe5,
	0xaf, 0x16, 0xcd, 0x7c, 0x72, 0xa0, 0x36, 0x1a, 0xaa, 0x59, 0xb3, 0x05, 0xde, 0x61, 0x41, 0xc7,
	0xcb, 0x60, 0x3d, 0xce, 0x7c, 0x60, 0x51, 0xf9, 0x4d, 0x54, 0x48, 0x27, 0x7e, 0x04, 0x17, 0x90,
	0xd7, 0x00, 0x58, 0x19, 0x54, 0x52, 0xed, 0x35, 0xd2, 0xa9, 0x4b, 0x0d, 0x10, 0xcb, 0xc2, 0x92,
	0xed, 0x0b, 0x3a, 0xf3, 0x2c, 0x17, 0x44, 0x7f, 0x02, 0x80, 0x0d, 0xe7, 0xed, 0x58, 0x21, 0x3c,
	0x94, 0x4c, 0xeb, 0x9f, 0x42, 0xb5, 0x83, 0x75, 0xf1, 0xbd, 0x06, 0xa3, 0x63, 0x0d, 0xfe, 0xdb,
	0x6c, 0x67, 0x66, 0x3a, 0x30, 0x43, 0x56, 0xb0, 0xd8, 0x29, 0x51, 0x5e, 0x29, 0xf1, 0x1d, 0x6f,
	0xcc, 0x96, 0x37, 0x56, 0x0f, 0x41, 0xf2, 0x0a, 0xce, 0x2c, 0xb0, 0x91, 0x72, 0xcb, 0xe9, 0x03,
	0x57, 0xd1, 0x03, 0xe9, 0xdf, 0x11, 0x4c, 0xae, 0x35, 0x2a, 0x92, 0xc2, 0x78, 0xc3, 0x39, 0xa1,
	0xf1, 0xf0, 0x78, 0xe2, 0x7e, 0xd6, 0xf0, 0x49, 0x97, 0xe9, 0xb6, 0xf5, 0x1e, 0xc6, 0x97, 0x68,
	0xee, 0x73, 0xfa, 0xb5, 0x87, 0x2f, 0x8e, 0x64, 0x1a, 0xee, 0x07, 0x98, 0xfb, 0x4b, 0xbb, 0x72,
	0x13, 0xbe, 0x3c, 0xac, 0x3c, 0x38, 0xc2, 0x63, 0xad, 0x3f, 0xc1, 0x63, 0x5f, 0x73, 0xd1, 0x7f,
	0xd1, 0x53, 0x35, 0x3e, 0xc2, 0x79, 0x63, 0xa1, 0xdd, 0xd9, 0xa9, 0x0a, 0xdd, 0x10, 0x17, 0x6e,
	0x21, 0x27, 0xd2, 0xf3, 0x99, 0xfb, 0xe9, 0xde, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x54,
	0x4a, 0xac, 0xca, 0x03, 0x00, 0x00,
}
