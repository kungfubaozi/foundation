// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base/authorization/pb/authorization.proto

package fs_base_authorization

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pb "zskparker.com/foundation/base/pb"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SyncRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProjectId            string   `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Meta                 *pb.Meta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827bea984501fc62, []int{0}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SyncRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SyncRequest) GetMeta() *pb.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncRequest)(nil), "fs.base.authorization.SyncRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	// 授权(需要用户手动操作)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*pb.Response, error)
	// 检查是否给予对应项目授权
	Check(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*pb.Response, error)
}

type authorizationClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationClient(cc *grpc.ClientConn) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.authorization.Authorization/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Check(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.authorization.Authorization/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	// 授权(需要用户手动操作)
	Sync(context.Context, *SyncRequest) (*pb.Response, error)
	// 检查是否给予对应项目授权
	Check(context.Context, *SyncRequest) (*pb.Response, error)
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.authorization.Authorization/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.authorization.Authorization/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Check(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.base.authorization.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Authorization_Sync_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Authorization_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/authorization/pb/authorization.proto",
}

func init() {
	proto.RegisterFile("base/authorization/pb/authorization.proto", fileDescriptor_827bea984501fc62)
}

var fileDescriptor_827bea984501fc62 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0x4a, 0x2c, 0x4e,
	0xd5, 0x4f, 0x2c, 0x2d, 0xc9, 0xc8, 0x2f, 0xca, 0xac, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f,
	0x48, 0x42, 0x15, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4d, 0x2b, 0xd6, 0x03, 0xa9,
	0xd6, 0x43, 0x91, 0x94, 0xd2, 0xae, 0x2a, 0xce, 0x2e, 0x48, 0x2c, 0xca, 0x4e, 0x2d, 0xd2, 0x4b,
	0xce, 0xcf, 0xd5, 0x4f, 0xcb, 0x2f, 0xcd, 0x4b, 0x81, 0x98, 0x03, 0x36, 0xba, 0x20, 0x09, 0x4c,
	0x43, 0xcc, 0x50, 0x4a, 0xe3, 0xe2, 0x0e, 0xae, 0xcc, 0x4b, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x2d, 0x4e, 0x2d, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x64, 0xb8, 0x38, 0x0b, 0x8a, 0xf2, 0xb3, 0x52, 0x93, 0x4b, 0x3c,
	0x53, 0x24, 0x98, 0xc0, 0x52, 0x08, 0x01, 0x21, 0x45, 0x2e, 0x96, 0xdc, 0xd4, 0x92, 0x44, 0x09,
	0x66, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x5e, 0x3d, 0x98, 0xbb, 0x7c, 0x53, 0x4b, 0x12, 0x83, 0xc0,
	0x52, 0x46, 0x7d, 0x8c, 0x5c, 0xbc, 0x8e, 0xc8, 0xce, 0x14, 0xb2, 0xe5, 0x62, 0x01, 0xd9, 0x2c,
	0xa4, 0xa4, 0x87, 0xd5, 0x1b, 0x7a, 0x48, 0xce, 0x92, 0x12, 0x84, 0xab, 0x09, 0x4a, 0x2d, 0x2e,
	0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xb2, 0xe3, 0x62, 0x75, 0xce, 0x48, 0x4d, 0xce, 0x26, 0x53, 0x7f,
	0x12, 0x1b, 0xd8, 0xff, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xf4, 0xbf, 0xfe, 0x70,
	0x01, 0x00, 0x00,
}
