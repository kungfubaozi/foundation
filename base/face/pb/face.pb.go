// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base/face/pb/face.proto

package fs_base_face

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pb "zskparker.com/foundation/base/pb"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchRequest struct {
	Base64Face           string   `protobuf:"bytes,1,opt,name=base64Face,proto3" json:"base64Face,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62cc7a28a1bf1bca, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetBase64Face() string {
	if m != nil {
		return m.Base64Face
	}
	return ""
}

type SearchResponse struct {
	State                *pb.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	UserId               string    `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	FaceToken            string    `protobuf:"bytes,3,opt,name=faceToken,proto3" json:"faceToken,omitempty"`
	Level                int64     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62cc7a28a1bf1bca, []int{1}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetState() *pb.State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SearchResponse) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

func (m *SearchResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type RemoveFaceRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFaceRequest) Reset()         { *m = RemoveFaceRequest{} }
func (m *RemoveFaceRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveFaceRequest) ProtoMessage()    {}
func (*RemoveFaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62cc7a28a1bf1bca, []int{2}
}

func (m *RemoveFaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveFaceRequest.Unmarshal(m, b)
}
func (m *RemoveFaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveFaceRequest.Marshal(b, m, deterministic)
}
func (m *RemoveFaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFaceRequest.Merge(m, src)
}
func (m *RemoveFaceRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveFaceRequest.Size(m)
}
func (m *RemoveFaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFaceRequest proto.InternalMessageInfo

func (m *RemoveFaceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type UpsertRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Base64Face           string   `protobuf:"bytes,2,opt,name=base64Face,proto3" json:"base64Face,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertRequest) Reset()         { *m = UpsertRequest{} }
func (m *UpsertRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertRequest) ProtoMessage()    {}
func (*UpsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62cc7a28a1bf1bca, []int{3}
}

func (m *UpsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertRequest.Unmarshal(m, b)
}
func (m *UpsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertRequest.Marshal(b, m, deterministic)
}
func (m *UpsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertRequest.Merge(m, src)
}
func (m *UpsertRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertRequest.Size(m)
}
func (m *UpsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertRequest proto.InternalMessageInfo

func (m *UpsertRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpsertRequest) GetBase64Face() string {
	if m != nil {
		return m.Base64Face
	}
	return ""
}

type CompareRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Base64Face           string   `protobuf:"bytes,2,opt,name=base64Face,proto3" json:"base64Face,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompareRequest) Reset()         { *m = CompareRequest{} }
func (m *CompareRequest) String() string { return proto.CompactTextString(m) }
func (*CompareRequest) ProtoMessage()    {}
func (*CompareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62cc7a28a1bf1bca, []int{4}
}

func (m *CompareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareRequest.Unmarshal(m, b)
}
func (m *CompareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareRequest.Marshal(b, m, deterministic)
}
func (m *CompareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareRequest.Merge(m, src)
}
func (m *CompareRequest) XXX_Size() int {
	return xxx_messageInfo_CompareRequest.Size(m)
}
func (m *CompareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompareRequest proto.InternalMessageInfo

func (m *CompareRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CompareRequest) GetBase64Face() string {
	if m != nil {
		return m.Base64Face
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "fs.base.face.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "fs.base.face.SearchResponse")
	proto.RegisterType((*RemoveFaceRequest)(nil), "fs.base.face.RemoveFaceRequest")
	proto.RegisterType((*UpsertRequest)(nil), "fs.base.face.UpsertRequest")
	proto.RegisterType((*CompareRequest)(nil), "fs.base.face.CompareRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceClient is the client API for Face service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceClient interface {
	// 人脸对比
	Compare(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*pb.Response, error)
	// 在人脸库里搜索
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 添加/更新人脸
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*pb.Response, error)
	// 移除人脸
	RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*pb.Response, error)
}

type faceClient struct {
	cc *grpc.ClientConn
}

func NewFaceClient(cc *grpc.ClientConn) FaceClient {
	return &faceClient{cc}
}

func (c *faceClient) Compare(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.face.Face/Compare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/fs.base.face.Face/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.face.Face/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceClient) RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.base.face.Face/RemoveFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServer is the server API for Face service.
type FaceServer interface {
	// 人脸对比
	Compare(context.Context, *CompareRequest) (*pb.Response, error)
	// 在人脸库里搜索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// 添加/更新人脸
	Upsert(context.Context, *UpsertRequest) (*pb.Response, error)
	// 移除人脸
	RemoveFace(context.Context, *RemoveFaceRequest) (*pb.Response, error)
}

func RegisterFaceServer(s *grpc.Server, srv FaceServer) {
	s.RegisterService(&_Face_serviceDesc, srv)
}

func _Face_Compare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).Compare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.face.Face/Compare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).Compare(ctx, req.(*CompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Face_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.face.Face/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Face_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.face.Face/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Face_RemoveFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).RemoveFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.base.face.Face/RemoveFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).RemoveFace(ctx, req.(*RemoveFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Face_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.base.face.Face",
	HandlerType: (*FaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compare",
			Handler:    _Face_Compare_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Face_Search_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Face_Upsert_Handler,
		},
		{
			MethodName: "RemoveFace",
			Handler:    _Face_RemoveFace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/face/pb/face.proto",
}

func init() { proto.RegisterFile("base/face/pb/face.proto", fileDescriptor_62cc7a28a1bf1bca) }

var fileDescriptor_62cc7a28a1bf1bca = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xdd, 0x4b, 0xfb, 0x30,
	0x14, 0xa5, 0xfb, 0xe8, 0x8f, 0xdd, 0x9f, 0x1b, 0x2c, 0x88, 0x96, 0x39, 0x74, 0x14, 0x1f, 0x06,
	0x83, 0x14, 0xa6, 0x88, 0xf8, 0x24, 0x0c, 0xfc, 0x78, 0xed, 0xf4, 0x0f, 0x48, 0xbb, 0x3b, 0x94,
	0x6d, 0x4d, 0x4c, 0xb2, 0x3d, 0xf8, 0xa8, 0xff, 0xb8, 0x24, 0xd9, 0x47, 0xbb, 0x15, 0x7c, 0xf0,
	0x29, 0xcd, 0x3d, 0x39, 0xe7, 0x9e, 0x7b, 0x4f, 0xe1, 0x34, 0x61, 0x0a, 0xa3, 0x29, 0x4b, 0x31,
	0x12, 0x89, 0x3d, 0xa9, 0x90, 0x5c, 0x73, 0x72, 0x34, 0x55, 0xd4, 0x60, 0xd4, 0xd4, 0x3a, 0x83,
	0x4f, 0x35, 0x13, 0x4c, 0xce, 0x50, 0xd2, 0x94, 0x2f, 0xa2, 0x29, 0x5f, 0x66, 0x13, 0xa6, 0xdf,
	0x79, 0x16, 0x59, 0xbe, 0x48, 0xec, 0xe9, 0xa8, 0x61, 0x04, 0xcd, 0x31, 0x32, 0x99, 0xbe, 0xc5,
	0xf8, 0xb1, 0x44, 0xa5, 0xc9, 0x39, 0x80, 0x81, 0x6f, 0xae, 0x1f, 0x58, 0x8a, 0x81, 0xd7, 0xf3,
	0xfa, 0x8d, 0x38, 0x57, 0x09, 0xbf, 0x3c, 0x68, 0x6d, 0x18, 0x4a, 0xf0, 0x4c, 0x21, 0xb9, 0x84,
	0xba, 0xd2, 0x4c, 0xbb, 0xd7, 0xff, 0x87, 0x2d, 0xba, 0xb1, 0x33, 0x36, 0xd5, 0xd8, 0x81, 0xe4,
	0x04, 0xfc, 0xa5, 0x42, 0xf9, 0x3c, 0x09, 0x2a, 0x56, 0x74, 0x7d, 0x23, 0x5d, 0x68, 0x18, 0xdb,
	0x2f, 0x7c, 0x86, 0x59, 0x50, 0xb5, 0xd0, 0xae, 0x40, 0x8e, 0xa1, 0x3e, 0xc7, 0x15, 0xce, 0x83,
	0x5a, 0xcf, 0xeb, 0x57, 0x63, 0x77, 0x09, 0x07, 0xd0, 0x8e, 0x71, 0xc1, 0x57, 0x68, 0x2c, 0x6d,
	0x9c, 0xef, 0x1a, 0x78, 0xf9, 0x06, 0xe1, 0x23, 0x34, 0x5f, 0x85, 0x42, 0xa9, 0x7f, 0x79, 0xb8,
	0x37, 0x7a, 0xe5, 0x60, 0xf4, 0x27, 0x68, 0x8d, 0xf8, 0x42, 0x30, 0x89, 0x7f, 0x54, 0x1a, 0x7e,
	0x57, 0xa0, 0x66, 0x3e, 0xc8, 0x1d, 0xfc, 0x5b, 0x4b, 0x92, 0x2e, 0xcd, 0xa7, 0x48, 0x8b, 0x9d,
	0x3a, 0xed, 0x2d, 0xba, 0x5d, 0xfb, 0x08, 0x7c, 0x17, 0x04, 0x39, 0x2b, 0x52, 0x0b, 0x81, 0x76,
	0xba, 0xe5, 0xe0, 0x5a, 0xe4, 0x16, 0x7c, 0xb7, 0x9c, 0x7d, 0x91, 0xc2, 0xca, 0xca, 0xda, 0xdf,
	0x03, 0xec, 0x32, 0x20, 0x17, 0x45, 0xf6, 0x41, 0x3a, 0x25, 0x0a, 0x89, 0x6f, 0x7f, 0xc1, 0xab,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x99, 0x47, 0xf1, 0xd8, 0x02, 0x00, 0x00,
}
