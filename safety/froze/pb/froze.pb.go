// Code generated by protoc-gen-go. DO NOT EDIT.
// source: safety/froze/pb/froze.proto

package fs_safety_froze

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pb "zskparker.com/foundation/base/pb"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Duration             string   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee7605a75d1e0ce9, []int{0}
}

func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRequest.Unmarshal(m, b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return xxx_messageInfo_AddRequest.Size(m)
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AddRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type RemoveRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee7605a75d1e0ce9, []int{1}
}

func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveRequest.Unmarshal(m, b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveRequest.Size(m)
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

func (m *RemoveRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CheckRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckRequest) Reset()         { *m = CheckRequest{} }
func (m *CheckRequest) String() string { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()    {}
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee7605a75d1e0ce9, []int{2}
}

func (m *CheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckRequest.Unmarshal(m, b)
}
func (m *CheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckRequest.Marshal(b, m, deterministic)
}
func (m *CheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRequest.Merge(m, src)
}
func (m *CheckRequest) XXX_Size() int {
	return xxx_messageInfo_CheckRequest.Size(m)
}
func (m *CheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRequest proto.InternalMessageInfo

func (m *CheckRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "fs.safety.froze.AddRequest")
	proto.RegisterType((*RemoveRequest)(nil), "fs.safety.froze.RemoveRequest")
	proto.RegisterType((*CheckRequest)(nil), "fs.safety.froze.CheckRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrozeClient is the client API for Froze service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrozeClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*pb.Response, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*pb.Response, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*pb.Response, error)
}

type frozeClient struct {
	cc *grpc.ClientConn
}

func NewFrozeClient(cc *grpc.ClientConn) FrozeClient {
	return &frozeClient{cc}
}

func (c *frozeClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.froze.Froze/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frozeClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.froze.Froze/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frozeClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.froze.Froze/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrozeServer is the server API for Froze service.
type FrozeServer interface {
	Check(context.Context, *CheckRequest) (*pb.Response, error)
	Add(context.Context, *AddRequest) (*pb.Response, error)
	Remove(context.Context, *RemoveRequest) (*pb.Response, error)
}

func RegisterFrozeServer(s *grpc.Server, srv FrozeServer) {
	s.RegisterService(&_Froze_serviceDesc, srv)
}

func _Froze_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrozeServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.froze.Froze/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrozeServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Froze_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrozeServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.froze.Froze/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrozeServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Froze_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrozeServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.froze.Froze/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrozeServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Froze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.safety.froze.Froze",
	HandlerType: (*FrozeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Froze_Check_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Froze_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Froze_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "safety/froze/pb/froze.proto",
}

func init() { proto.RegisterFile("safety/froze/pb/froze.proto", fileDescriptor_ee7605a75d1e0ce9) }

var fileDescriptor_ee7605a75d1e0ce9 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4e, 0x4c, 0x4b,
	0x2d, 0xa9, 0xd4, 0x4f, 0x2b, 0xca, 0xaf, 0x4a, 0xd5, 0x2f, 0x48, 0x82, 0x30, 0xf4, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0xf8, 0xd3, 0x8a, 0xf5, 0x20, 0xf2, 0x7a, 0x60, 0x61, 0x29, 0xed, 0xaa,
	0xe2, 0xec, 0x82, 0xc4, 0xa2, 0xec, 0xd4, 0x22, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xb4, 0xfc, 0xd2,
	0xbc, 0x94, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0xfd, 0xa4, 0xc4, 0x62, 0xb0, 0x76, 0x10, 0x0d, 0xd1,
	0xad, 0xe4, 0xc0, 0xc5, 0xe5, 0x98, 0x92, 0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24,
	0xc6, 0xc5, 0x56, 0x5a, 0x9c, 0x5a, 0xe4, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04,
	0xe5, 0x09, 0x49, 0x71, 0x71, 0xa4, 0x94, 0x16, 0x81, 0x0d, 0x91, 0x60, 0x02, 0xcb, 0xc0, 0xf9,
	0x4a, 0xea, 0x5c, 0xbc, 0x41, 0xa9, 0xb9, 0xf9, 0x65, 0xa9, 0x04, 0x0c, 0x51, 0x52, 0xe3, 0xe2,
	0x71, 0xce, 0x48, 0x4d, 0xce, 0x26, 0xa0, 0xce, 0x68, 0x1b, 0x23, 0x17, 0xab, 0x1b, 0xc8, 0x27,
	0x42, 0x96, 0x5c, 0xac, 0x60, 0x1d, 0x42, 0xb2, 0x7a, 0x68, 0x9e, 0xd4, 0x43, 0x36, 0x49, 0x4a,
	0x10, 0x24, 0x0d, 0xf6, 0x54, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x29, 0x17,
	0xb3, 0x63, 0x4a, 0x8a, 0x90, 0x34, 0x86, 0x46, 0x84, 0x6f, 0xb1, 0x69, 0xb3, 0xe6, 0x62, 0x83,
	0x78, 0x46, 0x48, 0x0e, 0x43, 0x27, 0x8a, 0x2f, 0xb1, 0x68, 0x4e, 0x62, 0x03, 0x07, 0xa9, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xf6, 0x87, 0x5c, 0xaf, 0x01, 0x00, 0x00,
}
