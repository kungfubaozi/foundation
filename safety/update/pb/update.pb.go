// Code generated by protoc-gen-go. DO NOT EDIT.
// source: safety/update/pb/update.proto

package fs_safety_update

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pb "zskparker.com/foundation/base/pb"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Meta                 *pb.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_557f11a30aa29ccd, []int{0}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateRequest) GetMeta() *pb.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "fs.safety.update.UpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateClient is the client API for Update service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateClient interface {
	UpdatePhone(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdateEnterprise(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdatePassword(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
	UpdateEmail(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error)
}

type updateClient struct {
	cc *grpc.ClientConn
}

func NewUpdateClient(cc *grpc.ClientConn) UpdateClient {
	return &updateClient{cc}
}

func (c *updateClient) UpdatePhone(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.update.Update/UpdatePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) UpdateEnterprise(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.update.Update/UpdateEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) UpdatePassword(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.update.Update/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) UpdateEmail(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/fs.safety.update.Update/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServer is the server API for Update service.
type UpdateServer interface {
	UpdatePhone(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdateEnterprise(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdatePassword(context.Context, *UpdateRequest) (*pb.Response, error)
	UpdateEmail(context.Context, *UpdateRequest) (*pb.Response, error)
}

func RegisterUpdateServer(s *grpc.Server, srv UpdateServer) {
	s.RegisterService(&_Update_serviceDesc, srv)
}

func _Update_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.update.Update/UpdatePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdatePhone(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_UpdateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.update.Update/UpdateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdateEnterprise(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.update.Update/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdatePassword(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.safety.update.Update/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdateEmail(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Update_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.safety.update.Update",
	HandlerType: (*UpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePhone",
			Handler:    _Update_UpdatePhone_Handler,
		},
		{
			MethodName: "UpdateEnterprise",
			Handler:    _Update_UpdateEnterprise_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Update_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Update_UpdateEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "safety/update/pb/update.proto",
}

func init() { proto.RegisterFile("safety/update/pb/update.proto", fileDescriptor_557f11a30aa29ccd) }

var fileDescriptor_557f11a30aa29ccd = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0xa2, 0x05, 0x53, 0x2a, 0x35, 0x78, 0x28, 0x05, 0xb1, 0x7a, 0x2a, 0x08, 0xb3,
	0x50, 0x9f, 0x40, 0xb0, 0xe2, 0x45, 0x90, 0x05, 0x1f, 0x60, 0xd6, 0x9d, 0xc5, 0xa5, 0xdd, 0x4c,
	0xcc, 0xcc, 0x2a, 0xfa, 0x2c, 0x3e, 0xac, 0x98, 0x94, 0x05, 0x7b, 0xdc, 0x53, 0xfe, 0x24, 0xff,
	0xff, 0xe5, 0xcf, 0x98, 0x0b, 0xc1, 0x9a, 0xf4, 0x2b, 0xef, 0x7c, 0x85, 0x4a, 0xb9, 0x2f, 0xf7,
	0x0a, 0x7c, 0x60, 0x65, 0x3b, 0xab, 0x05, 0x92, 0x03, 0xd2, 0xf9, 0xe2, 0xe6, 0x5b, 0xb6, 0x1e,
	0xc3, 0x96, 0x02, 0xbc, 0x72, 0x9b, 0xd7, 0xdc, 0xb9, 0x0a, 0xb5, 0x61, 0x97, 0x97, 0x28, 0x11,
	0xf0, 0xb7, 0xa6, 0xf8, 0xf5, 0xa3, 0x99, 0xbe, 0xc4, 0x58, 0x41, 0xef, 0x1d, 0x89, 0xda, 0x73,
	0x73, 0xfc, 0x81, 0xbb, 0x8e, 0xe6, 0xd9, 0x32, 0x5b, 0x9d, 0x14, 0x69, 0x63, 0xaf, 0xcc, 0x51,
	0x4b, 0x8a, 0xf3, 0xd1, 0x32, 0x5b, 0x4d, 0xd6, 0x53, 0xa8, 0x05, 0x22, 0xe4, 0x89, 0x14, 0x8b,
	0x78, 0xb5, 0xfe, 0x19, 0x99, 0x71, 0x42, 0xd9, 0x3b, 0x33, 0x49, 0xea, 0xf9, 0x8d, 0x1d, 0xd9,
	0x4b, 0x38, 0xec, 0x08, 0xff, 0xde, 0x5c, 0x9c, 0xf5, 0xbc, 0x82, 0xc4, 0xb3, 0x13, 0xb2, 0x0f,
	0x66, 0x96, 0x3c, 0x1b, 0xa7, 0x14, 0x7c, 0x68, 0x64, 0x18, 0xe7, 0xde, 0x9c, 0xee, 0xab, 0xa0,
	0xc8, 0x27, 0x87, 0x6a, 0x10, 0xa5, 0xff, 0xd0, 0xa6, 0xc5, 0x66, 0x37, 0x04, 0x51, 0x8e, 0xe3,
	0xbc, 0x6f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0x7b, 0xe4, 0xc2, 0xcf, 0x01, 0x00, 0x00,
}
